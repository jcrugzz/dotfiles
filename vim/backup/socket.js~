"use strict";

var sock = require('socket.io'),
  user = require('./models/user'),
  authorize = require('./authorize'),
  controllers = require('./controllers/socket'),
  platform = require('platform'),
  socket = exports,
  io;

var os = ['Windows', 'Mac OS X'];

socket.start = function (server, callback) {

  io = sock.listen(server);

  /*
   * Configure socket server
   */

  io.configure('development', function () {

    io.set('transports', ['websocket']);

  });

  io.set('authorization', function (data, accept) {

    if(data.headers['user-agent']) {

      var ua = platform.parse(data.headers['user-agent']);

      data.os = ua.os.family;
      // Set type of device here

    }

    accept(null, true);

  });

  socket.listen();

 /*
  * Set what device it is by UA
  * TODO: Figure out how to do this when we incorporate web app
  */

  callback();

};

socket.listen = function () {

  io.sockets.on('connection', function (client) {
    /*
     * Verify connected device if it is a phone
     */
    client.get('type', verify);

    function verify (err, res) {

      client.emit('verify', function (data) {

        var thing;

      });

    }


   /*
    * Data is formed as follows:
    * {method: string}
    */
    client.on('account', function (data, callback) {

      authorize('account', client, data, function (error, res) {

        controllers.account(data, callback);

      });

    });

    client.on('resume', function (data, callback) {

      authorize('resume', client, data, function (error, res) {

        controllers.resume(data, callback);

      });

    });

    client.on('register', function (data, callback) {

      authorize('register', client, data, function (error, res) {

        controllers.register(data, callback);

      });

    });

    client.on('hook', function (data, callback) {

      authorize('hook', client, data, function (error, res) {

        controllers.hook(data, callback);

      });

    });

  });

};

